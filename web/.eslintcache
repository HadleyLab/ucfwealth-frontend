[{"/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/index.tsx":"1","/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/serviceWorker.ts":"2","/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/services/initialize.ts":"3","/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/containers/App/index.tsx":"4","/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/services/history.ts":"5","/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/containers/SessionContext.ts":"6"},{"size":599,"mtime":1610981043169,"results":"7","hashOfConfig":"8"},{"size":6145,"mtime":1610949355493,"results":"9","hashOfConfig":"8"},{"size":383,"mtime":1610949355494,"results":"10","hashOfConfig":"8"},{"size":4398,"mtime":1610981475508,"results":"11","hashOfConfig":"8"},{"size":101,"mtime":1610949355493,"results":"12","hashOfConfig":"8"},{"size":308,"mtime":1610980885919,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"zetape",{"filePath":"17","messages":"18","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"16"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"16"},"/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/index.tsx",[],["29","30","31","32","33","34","35"],"/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/serviceWorker.ts",["36","37","38","39"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void; // eslint-disable-line\n    onUpdate?: (registration: ServiceWorkerRegistration) => void; // eslint-disable-line\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/services/initialize.ts",[],"/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/containers/App/index.tsx",["40","41","42"],"/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/services/history.ts",[],"/Users/alexanderpavlushkin/projects/covidimaging/covidimaging-frontend/web/src/containers/SessionContext.ts",["43"],"import * as React from 'react';\nimport { User } from 'shared/src/contrib/aidbox';\n\nimport { UserRole } from 'src/services/role';\n\ninterface SessionContextModel {\n    user: User;\n    role: UserRole;\n    logout: () => void;\n}\n\nexport const SessionContext = React.createContext<SessionContextModel>({} as any);\n",{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":22,"column":0,"nodeType":null,"endLine":22,"endColumn":90},{"ruleId":"60","message":"61","line":22,"column":68,"severity":1,"nodeType":null,"suggestions":"62","endLine":22,"endColumn":90},{"ruleId":"58","severity":1,"message":"59","line":23,"column":0,"nodeType":null,"endLine":23,"endColumn":89},{"ruleId":"60","message":"61","line":23,"column":67,"severity":1,"nodeType":null,"suggestions":"63","endLine":23,"endColumn":89},{"ruleId":"64","severity":2,"message":"65","line":4,"column":1,"nodeType":"66","messageId":"67","endLine":4,"endColumn":82},{"ruleId":"64","severity":2,"message":"68","line":5,"column":1,"nodeType":"66","messageId":"67","endLine":5,"endColumn":109},{"ruleId":"69","severity":2,"message":"70","line":116,"column":24,"nodeType":"71","messageId":"72","endLine":116,"endColumn":49},{"ruleId":"73","severity":2,"message":"74","line":1,"column":1,"nodeType":"66","endLine":1,"endColumn":32,"fix":"75"},"no-negated-in-lhs",["76"],"no-catch-shadow",["77"],"handle-callback-err",[],"no-mixed-requires",[],"no-new-require",[],"no-path-concat",[],"no-restricted-modules",[],"eslint-comments/no-unlimited-disable","Unexpected unlimited 'eslint-disable-line' comment. Specify some rule names to disable.","eslint-comments/no-unused-disable","ESLint rules are disabled but never reported.",["78"],["79"],"no-restricted-imports","'aidbox-react/lib/libs/remoteData' import is restricted from being used by a pattern.","ImportDeclaration","patterns","'aidbox-react/lib/services/instance' import is restricted from being used by a pattern.","@typescript-eslint/no-unused-vars","'renderAuthenticatedRoutes' is assigned a value but never used.","Identifier","unusedVar","import/order","There should be at least one empty line between import groups",{"range":"80","text":"81"},"no-unsafe-negation","no-shadow",{"desc":"82","fix":"83"},{"desc":"82","fix":"84"},[31,31],"\n","Remove `eslint-disable` comment.",{"range":"85","text":"86"},{"range":"87","text":"86"},[993,1015],"",[1082,1104]]