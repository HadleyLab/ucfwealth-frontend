[{"/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/index.tsx":"1","/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/serviceWorker.ts":"2","/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/services/initialize.ts":"3","/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/containers/App/index.tsx":"4","/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/containers/SessionContext.ts":"5"},{"size":599,"mtime":1611038524575,"results":"6","hashOfConfig":"7"},{"size":6145,"mtime":1610955045150,"results":"8","hashOfConfig":"7"},{"size":383,"mtime":1610955045150,"results":"9","hashOfConfig":"7"},{"size":4690,"mtime":1611042156806,"results":"10","hashOfConfig":"7"},{"size":308,"mtime":1611038524575,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"mp2fhb",{"filePath":"15","messages":"16","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":3,"warningCount":0,"fixableErrorCount":2,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":1,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"26"},"/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/index.tsx",[],["27","28","29","30","31","32","33"],"/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/serviceWorker.ts",["34","35","36","37"],"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n    onSuccess?: (registration: ServiceWorkerRegistration) => void; // eslint-disable-line\n    onUpdate?: (registration: ServiceWorkerRegistration) => void; // eslint-disable-line\n};\n\nexport function register(config?: Config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA',\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/services/initialize.ts",[],"/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/containers/App/index.tsx",["38","39","40"],"import React, { useEffect, useState } from 'react';\nimport { Route, Switch, Router, Redirect } from 'react-router-dom';\n\nimport { isFailure, notAsked } from 'aidbox-react/src/libs/remoteData';\nimport { isSuccess } from 'aidbox-react/src/libs/remoteData';\nimport { RemoteData } from 'aidbox-react/src/libs/remoteData';\nimport { resetInstanceToken, setInstanceBaseURL } from 'aidbox-react/src/services/instance';\nimport { setInstanceToken } from 'aidbox-react/src/services/instance';\nimport { Token } from 'aidbox-react/src/services/token';\n\nimport { User } from 'shared/src/contrib/aidbox';\n\nimport { Login } from 'src/containers/Login';\nimport { PractitionerApp } from 'src/containers/ParactitonerApp';\nimport { PatientApp } from 'src/containers/PatientApp';\nimport { SuperAdminApp } from 'src/containers/SuperAdminApp';\nimport { UnprivilegedApp } from 'src/containers/UnprivilegedApp';\nimport { getUserInfo } from 'src/services/auth';\nimport { baseURL } from 'src/services/constants';\nimport { history } from 'src/services/history';\nimport { getUserRole, UserRole } from 'src/services/role';\nimport { removeToken, retrieveToken, saveToken } from 'src/services/token';\n\nimport { SessionContext } from '../SessionContext';\nimport { RoleSwitch } from 'src/components/RoleSwitch';\n\n(function init() {\n    setInstanceBaseURL(baseURL);\n    const globalToken = retrieveToken();\n\n    if (globalToken) {\n        setInstanceToken(globalToken);\n    }\n})();\n\nfunction useApp() {\n    const [appToken, setAppToken] = useState<Token | undefined>(retrieveToken());\n\n    const setToken = (token: Token) => {\n        setInstanceToken(token);\n        saveToken(token);\n        setAppToken(token);\n    };\n\n    const resetToken = () => {\n        resetInstanceToken();\n        removeToken();\n        setAppToken(undefined);\n    };\n\n    const [userRD, setUserRD] = useState<RemoteData<User>>(notAsked);\n\n    useEffect(() => {\n        (async () => {\n            const userRemoteData = await getUserInfo();\n            setUserRD(userRemoteData);\n        })();\n    }, [appToken]);\n\n    return { appToken, setToken, userRD, logout: resetToken };\n}\n\nexport function App() {\n    const { appToken, setToken, userRD, logout } = useApp();\n\n    function renderAnonymousRoutes() {\n        return (\n            <Switch>\n                {/*<Route path=\"/signup\" exact render={(props) => <Signup {...props} />} />*/}\n                <Route path=\"/login\" exact>\n                    <Login setToken={setToken} />\n                </Route>\n                {/*<Route path=\"/reset-password\" exact render={(props) => <ResetPassword {...props} />} />*/}\n                {/*<Route path=\"/set-password/:code\" exact render={(props) => <SetPasswordWrapper {...props} />} />*/}\n                <Redirect\n                    to={{\n                        pathname: '/login',\n                        state: { referrer: history.location.pathname },\n                    }}\n                />\n            </Switch>\n        );\n    }\n\n    const renderAuthenticatedRoutes = () => {\n        const referrer = history?.location?.state?.referrer;\n        if (isSuccess(userRD)) {\n            const user = userRD.data;\n            return (\n                <Switch>\n                    <Route path=\"/app\">\n                        <SessionContext.Provider value={{ user, role: getUserRole(user), logout }}>\n                            <RoleSwitch>\n                                {{\n                                    [UserRole.SuperAdminRole]: () => <SuperAdminApp />,\n                                    [UserRole.PatientRole]: () => <PatientApp />,\n                                    [UserRole.PractitionerRole]: () => <PractitionerApp />,\n                                    default: () => <UnprivilegedApp />,\n                                }}\n                            </RoleSwitch>\n                        </SessionContext.Provider>\n                    </Route>\n                    <Redirect to={referrer !== '/' ? referrer : '/app'} />\n                </Switch>\n            );\n        }\n        if (isFailure(userRD)) {\n            return (\n                <div>\n                    Something went wrong while loading your user data. Refresh the page or{' '}\n                    <a onClick={logout}>logout</a> and login again.\n                </div>\n            );\n        }\n\n        const renderRoutes = () => {\n            if (appToken) {\n                return renderAuthenticatedRoutes();\n            }\n\n            return renderAnonymousRoutes();\n        };\n\n        return (\n            <Router history={history}>\n                <Switch>{renderRoutes()}</Switch>\n            </Router>\n        );\n    };\n\n    return <div>Hello</div>\n}\n","/home/aliestarten/Work/Beda.software/covidimaging-frontend/web/src/containers/SessionContext.ts",["41"],"import * as React from 'react';\nimport { User } from 'shared/src/contrib/aidbox';\n\nimport { UserRole } from 'src/services/role';\n\ninterface SessionContextModel {\n    user: User;\n    role: UserRole;\n    logout: () => void;\n}\n\nexport const SessionContext = React.createContext<SessionContextModel>({} as any);\n",["42","43","44","45","46","47","48"],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":22,"column":0,"nodeType":null,"endLine":22,"endColumn":90},{"ruleId":"65","message":"66","line":22,"column":68,"severity":1,"nodeType":null,"suggestions":"67","endLine":22,"endColumn":90},{"ruleId":"63","severity":1,"message":"64","line":23,"column":0,"nodeType":null,"endLine":23,"endColumn":89},{"ruleId":"65","message":"66","line":23,"column":67,"severity":1,"nodeType":null,"suggestions":"68","endLine":23,"endColumn":89},{"ruleId":"69","severity":2,"message":"70","line":24,"column":1,"nodeType":"71","endLine":24,"endColumn":52,"fix":"72"},{"ruleId":"69","severity":2,"message":"73","line":25,"column":1,"nodeType":"71","endLine":25,"endColumn":56,"fix":"74"},{"ruleId":"75","severity":2,"message":"76","line":118,"column":24,"nodeType":"77","messageId":"78","endLine":118,"endColumn":49},{"ruleId":"69","severity":2,"message":"70","line":1,"column":1,"nodeType":"71","endLine":1,"endColumn":32,"fix":"79"},{"ruleId":"49","replacedBy":"80"},{"ruleId":"51","replacedBy":"81"},{"ruleId":"53","replacedBy":"82"},{"ruleId":"55","replacedBy":"83"},{"ruleId":"57","replacedBy":"84"},{"ruleId":"59","replacedBy":"85"},{"ruleId":"61","replacedBy":"86"},"no-negated-in-lhs",["87"],"no-catch-shadow",["88"],"handle-callback-err",[],"no-mixed-requires",[],"no-new-require",[],"no-path-concat",[],"no-restricted-modules",[],"eslint-comments/no-unlimited-disable","Unexpected unlimited 'eslint-disable-line' comment. Specify some rule names to disable.","eslint-comments/no-unused-disable","ESLint rules are disabled but never reported.",["89"],["90"],"import/order","There should be at least one empty line between import groups","ImportDeclaration",{"range":"91","text":"92"},"`src/components/RoleSwitch` import should occur before import of `src/containers/Login`",{"range":"93","text":"94"},"@typescript-eslint/no-unused-vars","'renderAuthenticatedRoutes' is assigned a value but never used.","Identifier","unusedVar",{"range":"95","text":"92"},["87"],["88"],[],[],[],[],[],"no-unsafe-negation","no-shadow",{"desc":"96","fix":"97"},{"desc":"96","fix":"98"},[1221,1221],"\n",[591,1278],"import { RoleSwitch } from 'src/components/RoleSwitch';\nimport { Login } from 'src/containers/Login';\nimport { PractitionerApp } from 'src/containers/ParactitonerApp';\nimport { PatientApp } from 'src/containers/PatientApp';\nimport { SuperAdminApp } from 'src/containers/SuperAdminApp';\nimport { UnprivilegedApp } from 'src/containers/UnprivilegedApp';\nimport { getUserInfo } from 'src/services/auth';\nimport { baseURL } from 'src/services/constants';\nimport { history } from 'src/services/history';\nimport { getUserRole, UserRole } from 'src/services/role';\nimport { removeToken, retrieveToken, saveToken } from 'src/services/token';\n\nimport { SessionContext } from '../SessionContext';\n",[31,31],"Remove `eslint-disable` comment.",{"range":"99","text":"100"},{"range":"101","text":"100"},[993,1015],"",[1082,1104]]